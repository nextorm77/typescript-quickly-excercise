{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../src/shared/messages.ts"],"names":[],"mappings":"AAaA,yFAAyF;AACzF,MAAM,CAAN,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,oEAAqD,CAAA;IACrD,sEAAsD,CAAA;IACtD,qDAA6C,CAAA;IAC7C,+DAAkD,CAAA;AACpD,CAAC,EALW,YAAY,KAAZ,YAAY,QAKvB","sourcesContent":["/**\n * Alias string with UUID type for readability purpose. It hint that the message correlation ID\n * is not an arbitrary string, but represents a particular data format.\n */\nexport type UUID = string;\n\n// TODO: introduce stronger typing based on type literals.\nexport interface Message {\n  correlationId: UUID;\n  type: string;\n  payload?: any;\n}\n\n// TODO: find out whether request / response prefixes can be generated with mapped types.\nexport enum MessageTypes {\n  GetLongestChainRequest  = 'GET_LONGEST_CHAIN_REQUEST',\n  GetLongestChainResponse = 'GET_LONGEST_CHAIN_RESPONSE',\n  NewBlockRequest         = 'NEW_BLOCK_REQUEST',\n  NewBlockAnnouncement    = 'NEW_BLOCK_ANNOUNCEMENT'\n}\n"]}